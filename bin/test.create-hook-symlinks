#!/bin/bash

# Script to set custom git hooks for project for all devs
# working on te project to have.
#
# cd [path-of-the-script]
# . install-hooks.sh
#
# Folders usecase
# /.git
# /.git/hooks
# /scripts/install-hooks.sh <- Current script
# /scripts/git-hooks <- Custom hooks path

BASEDIR=$(dirname $0)
PARENT_PATH=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )

GIT_DIR=$(git rev-parse --show-toplevel)/.git
GIT_HOOK_DIR=$GIT_DIR/hooks
LOCAL_HOOK_DIR=./hooks

# List ok hooks to look for. Separate by spaces to add more
HOOK_NAMES="pre-commit"


echo "Installing hooks..."

echo "Setting chmod permission on .git/hooks dir"

chmod +x $GIT_HOOK_DIR/*

cd "$PARENT_PATH"

for hook in $HOOK_NAMES; do
    # if we have a custom hook to set
    echo " > Working on $LOCAL_HOOK_DIR/$hook"
    if [ -f $LOCAL_HOOK_DIR/$hook ]; then
        echo "  > Hook $hook found"

        # If the hook already exists, is executable and is not a symlink
        if [ -f $GIT_HOOK_DIR/$hook ]; then
            if [ ! -h $GIT_HOOK_DIR/$hook -a -x $GIT_HOOK_DIR/$hook ]; then
                echo " > Old git hook $hook disabled"
                # append .local to disable it
                mv $GIT_HOOK_DIR/$hook $GIT_HOOK_DIR/$hook.local
            fi
        fi
    
        # Create the symlink, overwriting the file if it exists
        echo " > Enable project git hook"

        ln -s -f ../../bin/hooks/$hook $GIT_HOOK_DIR/$hook
    else
        echo "  > Hook not found"
    fi
done

echo "Done"!